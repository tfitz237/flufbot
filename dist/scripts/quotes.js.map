{"version":3,"sources":["../../scripts/quotes.js"],"names":["fs","require","exports","quoteRandom","bot","name","commands","isCommand","private","rtn","randQuote","quoteAdd","addQuote","quoteShow","showQuote","user","quote","quotes","getQuotes","split","push","createdAt","Date","writeFile","JSON","stringify","length","num","Math","floor","random","from","message","match","exec","parseInt","e","parse","readFileSync"],"mappings":";;AAAA;;;;;;;;;;AAUA,IAAIA,KAAKC,QAAQ,IAAR,CAAT;;AAEAC,QAAQC,WAAR,GAAsB,UAASC,GAAT,EAAc;AAChC,WAAO;AACHC,cAAM,cADH;AAEHC,kBAAU,CAAC,cAAD,EAAiB,YAAjB,EAA+B,WAA/B,EAA4C,cAA5C,CAFP;AAGHC,mBAAU,IAHP;AAIHC,iBAAQ,KAJL;AAKHC,aAAKC;AALF,KAAP;AAOH,CARD;AASAR,QAAQS,QAAR,GAAmB,UAASP,GAAT,EAAc;AAC7B,WAAO;AACHC,cAAM,2BADH;AAEHC,kBAAU,CAAC,WAAD,EAAc,UAAd,EAA0B,UAA1B,EAAsC,WAAtC,CAFP;AAGHC,mBAAW,IAHR;AAIHC,iBAAQ,KAJL;AAKHC,aAAKG;AALF,KAAP;AAOH,CARD;AASAV,QAAQW,SAAR,GAAoB,UAAST,GAAT,EAAc;AAC9B,WAAO;AACHC,cAAM,gBADH;AAEHC,kBAAU,CAAC,YAAD,EAAe,WAAf,EAA4B,WAA5B,EAAyC,YAAzC,EAAuD,OAAvD,CAFP;AAGHC,mBAAW,IAHR;AAIHC,iBAAS,KAJN;AAKHC,aAAKK;AALF,KAAP;AAOH,CARD;;AAUA,SAASF,QAAT,CAAkBG,IAAlB,EAAuBC,KAAvB,EAA8B;AAC1B,QAAIC,SAASC,WAAb;AACAF,YAAQA,MAAMG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAR;AACAF,WAAOG,IAAP,CAAY,EAACL,MAAKA,IAAN,EAAYC,OAAMA,KAAlB,EAAyBK,WAAW,IAAIC,IAAJ,EAApC,EAAZ;AACAtB,OAAGuB,SAAH,CAAa,aAAb,EAA4BC,KAAKC,SAAL,CAAeR,MAAf,CAA5B;AACA,WAAO,6BAA6BA,OAAOS,MAAP,GAAgB,CAA7C,IAAgD,GAAvD;AACH;;AAED,SAAShB,SAAT,GAAqB;AACjB,QAAIO,SAASC,WAAb;AACA,QAAIS,MAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBb,OAAOS,MAAnC,CAAX;AACA,WAAO,MAAMC,GAAN,GAAY,MAAZ,GAAqBV,OAAOU,GAAP,EAAYX,KAAxC;AACH;AACD,SAASF,SAAT,CAAmBiB,IAAnB,EAAyBC,OAAzB,EAAkC;AAC9B,QAAIf,SAASC,WAAb;AACA,QAAIS,YAAJ;AACA,QAAIM,QAAQ,WAAWC,IAAX,CAAgBF,OAAhB,CAAZ;AACAL,UAAMQ,SAASF,MAAM,CAAN,CAAT,KAAsB,CAAC,CAA7B;AACA,QAAIjB,cAAJ;AACA,QAAI;AACA,YAAIA,SAAQC,OAAOU,GAAP,CAAZ;AACA,eAAO,MAAMA,GAAN,GAAY,MAAZ,GAAqBX,OAAMA,KAAlC;AACH,KAHD,CAIA,OAAOoB,CAAP,EAAU;AACN,eAAO,6BAAP;AACH;AACJ;;AAED,SAASlB,SAAT,GAAqB;AACjB,QAAID,SAASO,KAAKa,KAAL,CAAWrC,GAAGsC,YAAH,CAAgB,aAAhB,CAAX,CAAb;AACA,WAAOrB,MAAP;AACH","file":"quotes.js","sourcesContent":["/* return format:\r\nexports.name =\r\n{\r\n    name: '__NAME__',\r\n    commands: ['__COMMAND1__', '__COMMAND2__'],\r\n    isCommand: true,\r\n    private: false\r\n    rtn: function(from, to, message) { return 'blah';}\r\n}\r\n*/\r\nlet fs = require('fs');\r\n\r\nexports.quoteRandom = function(bot) {\r\n    return {\r\n        name: 'random quote',\r\n        commands: [\"random quote\", \"rand quote\", \"randquote\", \"quote random\"],\r\n        isCommand:true,\r\n        private:false,\r\n        rtn: randQuote\r\n    };\r\n}\r\nexports.quoteAdd = function(bot) {\r\n    return {\r\n        name: 'add quote \"<quote> quote\"',\r\n        commands: ['add quote', 'addquote', 'quoteadd', 'quote add'],\r\n        isCommand: true,\r\n        private:false,\r\n        rtn: addQuote\r\n    };\r\n}\r\nexports.quoteShow = function(bot) {\r\n    return {\r\n        name: 'show quote [#]',\r\n        commands: ['show quote', 'showquote', 'quoteshow', 'quote show', 'quote'],\r\n        isCommand: true,\r\n        private: false,\r\n        rtn: showQuote\r\n    };\r\n}\r\n\r\nfunction addQuote(user,quote) {\r\n    let quotes = getQuotes();\r\n    quote = quote.split('\"')[1];\r\n    quotes.push({user:user, quote:quote, createdAt: new Date()});\r\n    fs.writeFile('quotes.json', JSON.stringify(quotes));\r\n    return \"Added quote to number [\" + (quotes.length - 1)+\"]\";\r\n}\r\n\r\nfunction randQuote() {\r\n    let quotes = getQuotes();\r\n    let num =  Math.floor((Math.random() * quotes.length));\r\n    return \"[\" + num + \"]-> \" + quotes[num].quote;\r\n}\r\nfunction showQuote(from, message) {\r\n    let quotes = getQuotes();\r\n    let num;\r\n    let match = /[(0-9)+]/.exec(message);\r\n    num = parseInt(match[0]) || -1;\r\n    let quote;\r\n    try {\r\n        let quote = quotes[num];\r\n        return \"[\" + num + \"]-> \" + quote.quote;\r\n    }\r\n    catch (e) {\r\n        return \"Could not find that quote #\";\r\n    }\r\n}\r\n\r\nfunction getQuotes() {\r\n    let quotes = JSON.parse(fs.readFileSync('quotes.json'));\r\n    return quotes;\r\n}\r\n"]}